{"version":3,"sources":["firebase.js","Todo.js","CompletedTodo.js","FormDialog.js","App.js","serviceWorker.js","index.js","images/desk.png"],"names":["db","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","console","log","Todo","props","useState","completedTodos","setCompletedTodos","List","className","ListItem","IconButton","onClick","event","collection","add","todo","timeStamp","FieldValue","serverTimestamp","doc","id","delete","ListItemText","primary","CompletedTodo","FormDialog","state","todos","setTodos","input","setInput","handleClose","setOpen","addToDo","preventDefault","Date","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","value","onChange","target","DialogActions","Button","color","App","setcompletedTodos","showCompletedTodos","setShowCompletedTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","length","completedTodo","src","image","alt","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.fc955fd0.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\n\r\nimport * as firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyD4qP-cvnEv9ljI3DrdM0OSLLf1ak73AKc\",\r\n  authDomain: \"todo-e68e9.firebaseapp.com\",\r\n  databaseURL: \"https://todo-e68e9.firebaseio.com\",\r\n  projectId: \"todo-e68e9\",\r\n  storageBucket: \"todo-e68e9.appspot.com\",\r\n  messagingSenderId: \"50701535203\",\r\n  appId: \"1:50701535203:web:2f775c02ebd1c2c5a142d6\",\r\n  measurementId: \"G-RZ1NV0PE16\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n    console.log('namita   ++++++ db', db);\r\nexport default db;\r\n","import {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\n\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport \"./Todo.css\";\r\nimport React, { useState } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n\r\nfunction Todo(props) {\r\n const [completedTodos, setCompletedTodos] = useState([]);\r\n  const addToCompletedTasks = (event) => {\r\n    //add to completed todo list\r\n    db.collection(\"completedTodos\").add({\r\n      todo: props.todo.todo,\r\n      timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setCompletedTodos([...completedTodos, props.todo.todo]);\r\n\r\n    //delete from todo list\r\n    db.collection(\"todos\").doc(props.todo.id).delete()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <List className=\"todo__list\">\r\n        <ListItem>\r\n        <IconButton  onClick={addToCompletedTasks}>\r\n            <RadioButtonUncheckedIcon/>\r\n          </IconButton>\r\n          <ListItemText primary={props.todo.todo}></ListItemText>\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport \"./CompletedTodo.css\";\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\r\n\r\nfunction CompletedTodo(props) {\r\n    console.log('Hmmm Namita');\r\n  return (\r\n    <div>\r\n      <List className=\"todo__list completed__list\">\r\n        <ListItem>\r\n          <ListItemText\r\n            className=\"completed__listitem\"\r\n            primary={props.todo}\r\n          ></ListItemText>\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompletedTodo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nexport default function FormDialog(props, state) {\r\n  const [todos, setTodos] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    props.setOpen(false);\r\n  };\r\n\r\n  const handleAdd = (event) => {\r\n    addToDo(event);\r\n    handleClose();\r\n  };\r\n\r\n  const addToDo = (event) => {\r\n    event.preventDefault();\r\n    const date = new Date();\r\n    db.collection(\"todos\").add({\r\n      todo: input,\r\n      timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setTodos([...todos, input]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={props.open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">\r\n          Add Task isdk kajshdjk hajkshd sjdkajshdk\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"New Task\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleAdd} color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Todo from \"./Todo\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport CompletedTodo from \"./CompletedTodo\";\r\nimport image from \"./images/desk.png\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\n\r\nimport FormDialog from \"./FormDialog\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [completedTodos, setcompletedTodos] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  const [showCompletedTodos, setShowCompletedTodos] = useState(false);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"todos\")\r\n      .orderBy(\"timeStamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        console.log(snapshot.docs.map((doc) => doc.data()));\r\n        setTodos(\r\n          snapshot.docs.map((doc) => ({ id: doc.id, todo: doc.data().todo }))\r\n        );\r\n      });\r\n\r\n    db.collection(\"completedTodos\")\r\n      .orderBy(\"timeStamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        console.log(snapshot);\r\n        setcompletedTodos(snapshot.docs.map((doc) => doc.data().todo));\r\n      });\r\n  }, []);\r\n\r\n  const addToDo = (event) => {\r\n    event.preventDefault();\r\n    const date = new Date();\r\n    db.collection(\"todos\").add({\r\n      todo: input,\r\n      timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setTodos([...todos, input]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  const onMenuClick = () => {\r\n    console.log(\"You just clicked on Menu icon\");\r\n  };\r\n\r\n  const onAddClick = () => {\r\n    setOpen(true);\r\n    console.log(\"You just clicked on Add icon\");\r\n  };\r\n\r\n  const onMoreOptionsClick = () => {\r\n    console.log(\"You just clicked on More Options icon\");\r\n  };\r\n\r\n  const onCompletedClick =() => {\r\n    setShowCompletedTodos(!showCompletedTodos);\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__container\">\r\n        <div className=\"app__header\">\r\n          <h2>My Tasks</h2>\r\n        </div>\r\n        {todos.length || completedTodos.length ? (\r\n          <div className=\"app__body\">\r\n            <ul>\r\n              {todos.map((todo) => (\r\n                <div>\r\n                  <Todo todo={todo}></Todo>\r\n                </div>\r\n              ))}\r\n            </ul>\r\n            <div onClick={onCompletedClick}>\r\n              Completed ( {completedTodos.length} )\r\n            </div>\r\n            {showCompletedTodos ? (\r\n              <ul>\r\n                {completedTodos.map((completedTodo) => (\r\n                  <CompletedTodo todo={completedTodo} />\r\n                ))}\r\n              </ul>\r\n            ) : null}\r\n          </div>\r\n        ) : (\r\n          <div className=\"app__body\">\r\n            <img className=\"app__image\" src={image} alt=\"https://favpng.com/\" />\r\n            <div class=\"app__motivationText\">\r\n              <p>Let's get some work done..</p>\r\n              <p>Anything to add?</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"app__footer\">\r\n          <IconButton onClick={onMenuClick} className=\"icons\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AddCircleIcon onClick={onAddClick} />\r\n          </IconButton>\r\n          <IconButton onClick={onMoreOptionsClick}>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n          {open}\r\n          {open ? <FormDialog open={open} setOpen={setOpen}/> : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/desk.95eecfe3.png\";"],"sourceRoot":""}